origin   everybitcounts.net2006
artifact topical
package  view

"""
 graph_view.rel

 Calculation of positioning of topics in a star-shaped graph view centred around the selected topic.
"""

import
   model
   strings
   datetime


MIN_Y_SEPARATION = 100
Y_SEP_GROWTH = 25
CHAR_WIDTH = 8
GRAND_SQUEEZE = 2  // Squishing nodes together if grandparents or grandchildren
GREAT_GRAND_SQUEEZE = 5  // Squishing nodes together if great grandparents or great grandchildren
CHAR_HEIGHT = 14
MAX_TITLE_CHARS_DISPLAYED = 40
X_MIN = 50
Y_MIN = 50
Y_ADJUST_INCREMENT = 12
VERTICAL_LAYOUT_CHILD_HORIZONTAL_SEPARATION = 250
VERTICAL_LAYOUT_GRANDCHILD_HORIZONTAL_SEPARATION = 200


setGraphPositions 
   topic model.Topic 
   user model.User
>
   width Int
   height Int
"""
 Computes positions for topic nodes in a node-and-edge topic graph centred on 
 the specified topic.
 The positions are represented as position objects related to the user and each topic.
 Returns the required width and height of the canvas for the graph.
""" 


   // height = plus 
   //             times 2 Y_MIN
   //             times 
   //                2
   //                plus 
   //                   times MIN_Y_SEPARATION 3
   //                   times Y_SEP_GROWTH 3
                       

   numLayers = 0

   np = len topic.parentLinks
   ngp = 0 
   nggp = 0

   if np
      numLayers = 1

      // Collect Grandparents
      grandParents = []model.Topic
      for parentLink in topic.parentLinks
         parent = parentLink.parent
         for gpLink in parent.parentLinks
            grandParents += gpLink.parent

      ngp = len grandParents

      if ngp
         numLayers = 2

         // Collect Great Grandparents
         greatGrandParents = []model.Topic
         for grandparent in grandParents
            for ggpLink in grandparent.parentLinks
               greatGrandParents += ggpLink.parent

         nggp = len greatGrandParents
         if nggp
            numLayers = 3

   nc = len topic.childLinks
   ngc = 0
   nggc = 0

   if nc
      numLayers = plus numLayers 1

      // Collect Grandchildren
      grandChildren = []model.Topic
      for childLink in topic.childLinks
         child = childLink.child
         for gpLink in child.childLinks
            grandChildren += gpLink.child

      ngc = len grandChildren

      if ngc
         numLayers = plus numLayers 1      
         
         // Collect Great Grandchildren
         greatGrandChildren = []model.Topic
         for grandchild in grandChildren
            for ggcLink in grandchild.childLinks
               greatGrandChildren += ggcLink.child

         nggc = len greatGrandChildren
         if nggc
            numLayers = plus numLayers 1

   grandchildrenVertical = gt ngc 10
   greatGrandchildrenVertical = or grandchildrenVertical (gt nggc 15)

   wa wp wgp wggp = ancestorsWidth topic 
   wd wc wgc wggc = descendantsWidth topic grandchildrenVertical greatGrandchildrenVertical
   
   width = plus
              max wa wd
              times 2 X_MIN   

   x = div (times width 2) 5  // A little to the left of centre.

   height = plus 
               times 2 Y_MIN
               plus 
                  times MIN_Y_SEPARATION numLayers
                  times Y_SEP_GROWTH numLayers


   if np
      if ngp
         if nggp
            if nc
               if ngc
                  if nggc  // All 7 layers
                     y = div height 2  
                  else  // 6 layers - bottom 1 missing
                     y = div (times 2 height) 3
               else  // 5 layers - bottom 2 missing
                  y = div (times 4 height) 5
            else  // 4 layers - topic is bottom
               y = minus height Y_MIN
         else
            if nc
               if ngc
                  if nggc  //  6 layers
                     y = div (times 1 height) 3
                  else  // 5 layers - bottom 1 missing
                     y = div height 2  
               else  // 4 layers - bottom 2 missing
                  y = div (times 3 height) 4
            else  // 3 layers - topic is bottom
               y = minus height Y_MIN    
      else              
         if nc
            if ngc
               if nggc  //  5 layers
                  y = div (times 1 height) 5
               else  // 4 layers - bottom 1 missing
                  y = div height 4  
            else  // 3 layers - bottom 2 missing
               y = div (times 3 height) 4
         else  // 2 layers - topic is bottom
            y = minus height Y_MIN    
   else              
      if nc
         if ngc
            if nggc  //  4 layers
               y = Y_MIN
            else  // 3 layers - bottom 1 missing
               y = div height 4  
         else  // 2 layers - bottom 2 missing
            y = div height 3
      else  // 1 layers - topic is bottom
         y = div height 2            

   parents = [
                for parentLink in topic.parentLinks
                   parentLink.parent
             ]model.Topic

   children = [
                 for childLink in topic.childLinks
                    childLink.child
              ]model.Topic


   pos = position topic user
   pos.x = x
   pos.y = y

   focusPosition = pos  // Save the position of the focus topic
   focusTopicWidth = times (len topic.title) CHAR_WIDTH


   // Lay out related tos

   xMaxUsed = X_MIN  // These will define how much the focus topic has to be moved
   yMaxUsed = Y_MIN  // to make remove for related topics

   nt = len topic.toLinks
   yi = plus (times 3 CHAR_HEIGHT) (minus y MIN_Y_SEPARATION)
   yFirstRelated = yi

   if nt
      xi = X_MIN
      isLeftmost = true
      for toLink in topic.toLinks
         related = toLink.to
         pos = position related user

         offset = times
                     min (len related.title) MAX_TITLE_CHARS_DISPLAYED
                     CHAR_WIDTH

         if isLeftmost
            xi = plus xi (div offset 3)
            // print related.title xi 
            isLeftmost = false 

         pos.x = xi
         pos.y = yi         

         xMaxUsed = plus xi offset
         yMaxUsed = plus yi CHAR_HEIGHT

         xi = plus xi 50
         yi = plus yi CHAR_HEIGHT

   // Lay out related froms

   nf = len topic.fromLinks

   if nf
      xi = X_MIN
      isLeftmost = true
      for fromLink in topic.fromLinks
         related = fromLink.from
         pos = position related user      

         offset = times
                     min (len related.title) MAX_TITLE_CHARS_DISPLAYED
                     CHAR_WIDTH

         if isLeftmost
            xi = plus xi (div offset 2)
            // print related.title xi 
            isLeftmost = false 

         pos.x = xi
         pos.y = yi         

         xMaxUsed = max xMaxUsed (plus xi offset)
         yMaxUsed = plus yi CHAR_HEIGHT

         xi = plus xi 50
         yi = plus yi CHAR_HEIGHT

   xMaxUsed = plus xMaxUsed 50
   yMaxUsed = plus yMaxUsed 50

   if lt focusPosition.x xMaxUsed
      focusPosition.x = xMaxUsed
      x = xMaxUsed
      // print "oldWidth" width
      newWidth = plus xMaxUsed focusTopicWidth
      if lt width newWidth
         width = newWidth
      // print x 
      // print width
   
   yRelatedOffset = 0                  
   yChildren = plus y MIN_Y_SEPARATION
   if lt yMaxUsed (minus yChildren 20)
      yRelatedOffset = minus (minus yChildren 20) yMaxUsed

   if gt (plus yRelatedOffset yFirstRelated) y
      yRelatedOffset = minus y yFirstRelated

   if gt yRelatedOffset 0
      for toLink in topic.toLinks
         for pos in toLink.to.positions
            if eq pos.user user
               pos.y = plus pos.y yRelatedOffset
               break

      for fromLink in topic.fromLinks
         for pos in fromLink.from.positions
            if eq pos.user user
               pos.y = plus pos.y yRelatedOffset
               break


   // Lay out Parents

   yi = minus y MIN_Y_SEPARATION 
 
   // EGH not doing this any more because alternating y bumps up and down
   // yAdjust = times Y_ADJUST_INCREMENT (div np 2)
   // yi = minus yi yAdjust

   prevOffset = 0

   if np
      xi = X_MIN
      isLeftmost = true
      isOdd = true
      for parent in parents
         pos = position parent user

         offset = times
                     min (len parent.title) MAX_TITLE_CHARS_DISPLAYED
                     CHAR_WIDTH

         if isLeftmost
            xi = plus xi (div offset 2)
            // print parent.title xi 
            isLeftmost = false 
         else
            xi = plus xi 
                      div (plus offset prevOffset) 2
         prevOffset = offset


         if isOdd  // EGH new
            yi = plus yi Y_ADJUST_INCREMENT
         pos.x = xi
         pos.y = yi         
         if isOdd  // EGH new
            yi = minus yi Y_ADJUST_INCREMENT
            isOdd = false
         else
            isOdd = true   


      // Lay out Grandparents

      yi = minus yi (plus MIN_Y_SEPARATION Y_SEP_GROWTH)

      // EGH not doing this any more because alternating y bumps up and down      
      // yAdjust = times Y_ADJUST_INCREMENT (div ngp 4)
      // yi = minus yi yAdjust

      if ngp
         xi = X_MIN
         isLeftmost = true
         isOdd = true         
         for grandParent in grandParents
            pos = position grandParent user

            offset = times
                        min (len grandParent.title) MAX_TITLE_CHARS_DISPLAYED
                        minus CHAR_WIDTH GRAND_SQUEEZE

            if isLeftmost
               xi = plus xi (div offset 2)
               isLeftmost = false
            else
               xi = plus xi 
                         div (plus offset prevOffset) 2
            prevOffset = offset

            if isOdd  // EGH new
               yi = plus yi Y_ADJUST_INCREMENT

            pos.x = xi
            pos.y = yi         
            if isOdd  // EGH new
               yi = minus yi Y_ADJUST_INCREMENT
               isOdd = false
            else
               isOdd = true   


         // Lay out Great Grandparents

         yi = minus yi 
                    plus MIN_Y_SEPARATION (times 2 Y_SEP_GROWTH)
         // yAdjust = times Y_ADJUST_INCREMENT (div nggp 2)
         // yi = minus yi yAdjust

         if nggp
            xi = X_MIN
            isLeftmost = true
            isOdd = true
            for greatGrandParent in greatGrandParents
               pos = position greatGrandParent user

               offset = times
                           min (len greatGrandParent.title) MAX_TITLE_CHARS_DISPLAYED
                           minus CHAR_WIDTH GREAT_GRAND_SQUEEZE

               if isLeftmost
                  xi = plus xi (div offset 2)
                  isLeftmost = false
               else
                  xi = plus xi 
                            div (plus offset prevOffset) 2
               prevOffset = offset

               if isOdd  // EGH new
                  yi = plus yi Y_ADJUST_INCREMENT
               pos.x = xi
               pos.y = yi      
               if isOdd  // EGH new
                  yi = minus yi Y_ADJUST_INCREMENT
                  isOdd = false
               else
                  isOdd = true                      

   // Lay out Children

   yi = plus y MIN_Y_SEPARATION 

   if gt yMaxUsed yi
      yi = yMaxUsed
   
   // EGH not doing this any more because alternating y bumps up and down                  
   // yAdjust = times Y_ADJUST_INCREMENT (div nc 2)
   // yi = minus yi yAdjust

   if nc
      xi = X_MIN
      isLeftmost = true
      isOdd = true
      xiPrev = xi

      for child in children
         pos = position child user

         offset = times
                     min (len child.title) MAX_TITLE_CHARS_DISPLAYED
                     CHAR_WIDTH

         if isLeftmost
            xi = plus xi (div offset 2)      
            // print child.title xi       
         else
            xi = plus xi 
                      div (plus offset prevOffset) 2
         prevOffset = offset

         if gt ngc 10
            if isLeftmost
               xi = plus xi 200
            else
               xi = plus xi VERTICAL_LAYOUT_CHILD_HORIZONTAL_SEPARATION

         xigc = xi

         if isOdd  // EGH new
            yi = minus yi Y_ADJUST_INCREMENT
         pos.x = xi
         pos.y = yi    

         yMaxUsed = max yMaxUsed yi  

         if isOdd  // EGH new
            yi = plus yi Y_ADJUST_INCREMENT
            isOdd = false
         else
            isOdd = true   

         // print child.title "offset" offset "xi" xi

         if gt ngc 10

            // Lay out Grandchildren from one child
            ygc = plus yi (plus MIN_Y_SEPARATION Y_SEP_GROWTH)
            yigc = ygc

            ngcThisChild = len child.childLinks
            if gt ngcThisChild 1
               if isLeftmost
                  xigc = minus xigc 75 
               else
                  xigc = minus xigc 
                               div (times ngcThisChild 50) 3 
                  xigc = max (plus xiPrev 150) xigc

            for gcl in child.childLinks
               grandChild = gcl.child
               pos = position grandChild user
               // hasGreatGrandChild = gt 0 (len grandChild.childLinks)
               
               pos.x = xigc
               pos.y = yigc

               yMaxUsed = max yMaxUsed yigc                  

               yigc = plus yigc (times 3 Y_ADJUST_INCREMENT)  
               xigc = plus xigc 50

               xiggc = minus pos.x 25
               yiggc = plus yigc 
                            plus MIN_Y_SEPARATION (times 3 Y_SEP_GROWTH)

               for ggcl in grandChild.childLinks
                  greatGrandChild = ggcl.child
                  pos = position greatGrandChild user

                  pos.x = xiggc
                  pos.y = yiggc


                  yMaxUsed = max yMaxUsed yiggc                   

                  yiggc = plus yiggc (times 3 Y_ADJUST_INCREMENT)  
                  xiggc = plus xiggc 25



         isLeftmost = false
         xiPrev = xi
        
      /////////////////////////

      if lte ngc 10

         // Lay out all Grandchildren

         yi = plus yi (plus MIN_Y_SEPARATION Y_SEP_GROWTH)
         yAdjust = times Y_ADJUST_INCREMENT (div ngc 4)
         yi = plus yi yAdjust

         if ngc
            xi = X_MIN
            isLeftmost = true
            isOdd = true
            xiPrev = xi

            for grandChild in grandChildren
               pos = position grandChild user

               offset = times
                           min (len grandChild.title) MAX_TITLE_CHARS_DISPLAYED
                           minus CHAR_WIDTH GRAND_SQUEEZE

               if isLeftmost
                  xi = plus xi (div offset 2)             
               else
                  xi = plus xi 
                            div (plus offset prevOffset) 2
               prevOffset = offset

               if isOdd  // EGH new
                  yi = minus yi Y_ADJUST_INCREMENT


               if gt nggc 15
                  if isLeftmost
                     xi = plus xi 200
                  else
                     xi = plus xi VERTICAL_LAYOUT_GRANDCHILD_HORIZONTAL_SEPARATION


               xiggc = xi

               pos.x = xi
               pos.y = yi      

               yMaxUsed = max yMaxUsed yi   

               if isOdd  // EGH new
                  yi = plus yi Y_ADJUST_INCREMENT
                  isOdd = false
               else
                  isOdd = true    

               if gt nggc 15
                  // Lay out grand children of this child vertically

                  yggc = plus yi (plus MIN_Y_SEPARATION Y_SEP_GROWTH)
                  yiggc = yggc

                  nggcThisGrandChild = len grandChild.childLinks
                  if gt nggcThisGrandChild 1
                     if isLeftmost
                        xiggc = minus xiggc 75 
                     else
                        xiggc = minus xiggc 
                                      div (times nggcThisGrandChild 25) 3 
                        xiggc = max (plus xiPrev 100) xiggc

                  for ggcl in grandChild.childLinks
                     greatGrandChild = ggcl.child
                     pos = position greatGrandChild user
                     // hasGreatGrandChild = gt 0 (len grandChild.childLinks)
                     
                     pos.x = xiggc
                     pos.y = yiggc

                     yMaxUsed = max yMaxUsed yiggc                  

                     yiggc = plus yiggc (times 3 Y_ADJUST_INCREMENT)  
                     xiggc = plus xiggc 25


               isLeftmost = false
               xiPrev = xi


            
            if lte nggc 15
               // Lay out all Great Grandchildren

               yi = plus yi 
                         plus MIN_Y_SEPARATION (times 2 Y_SEP_GROWTH)
               yAdjust = times Y_ADJUST_INCREMENT (div nggc 2)
               yi = plus yi yAdjust

               if nggc
                  xi = X_MIN
                  isLeftmost = true
                  isOdd = true
                  for greatGrandChild in greatGrandChildren
                     pos = position greatGrandChild user

                     offset = times
                                 min (len greatGrandChild.title) MAX_TITLE_CHARS_DISPLAYED
                                 minus CHAR_WIDTH GREAT_GRAND_SQUEEZE

                     if isLeftmost
                        xi = plus xi (div offset 2)             
                        isLeftmost = false
                     else
                        xi = plus xi 
                                  div (plus offset prevOffset) 2
                     prevOffset = offset

                     if isOdd  // EGH new
                        yi = minus yi Y_ADJUST_INCREMENT
                     
                     pos.x = xi
                     pos.y = yi  

                     yMaxUsed = yi 

                     if isOdd  // EGH new
                        yi = plus yi Y_ADJUST_INCREMENT
                        isOdd = false
                     else
                        isOdd = true                       

      yMaxUsed = plus yMaxUsed 50

      if gt yMaxUsed height
         height = yMaxUsed 

      if nggp
         distribute greatGrandParents user (minus CHAR_WIDTH GREAT_GRAND_SQUEEZE) width false
         rightShift greatGrandParents user focusPosition.x      
      if ngp
         distribute grandParents user (minus CHAR_WIDTH GRAND_SQUEEZE) width (gt nggp 0)
         rightShift grandParents user focusPosition.x      
      if np
         if gt wgp wp
            distribute parents 
                       user 
                       CHAR_WIDTH 
                       minus width (times 2 X_MIN) 
                       gt ngp 0   
         else 
            distribute parents user CHAR_WIDTH width (gt ngp 0)   
         rightShift parents user focusPosition.x      

      if lte ngc 10   
         if nggc
            if lte nggc 15
               distribute greatGrandChildren user (minus CHAR_WIDTH GREAT_GRAND_SQUEEZE) width false
               rightShift greatGrandChildren user focusPosition.x       
         if ngc
            if lte nggc 15
               distribute grandChildren user (minus CHAR_WIDTH GRAND_SQUEEZE) width (gt nggc 0)
               rightShift grandChildren user focusPosition.x       
         
         if nc
            if gt wgc wc
               distribute children
                          user 
                          CHAR_WIDTH 
                          minus width (times 2 X_MIN) 
                          gt ngc 0
            else
               distribute children user CHAR_WIDTH width (gt ngc 0)
            rightShift children user focusPosition.x






setGraphPositionsOld
   topic model.Topic 
   user model.User
>
   width Int
   height Int
"""
 Computes positions for topic nodes in a node-and-edge topic graph centred on 
 the specified topic.
 The positions are represented as position objects related to the user and each topic.
 Returns the required width and height of the canvas for the graph.
""" 
   wa wp wgp wggp = ancestorsWidth topic
   wd wc wgc wggc = descendantsWidth topic
   width = plus
              max wa wd
              times 2 X_MIN

   height = plus 
               times 2 Y_MIN
               times 
                  2
                  plus 
                     times MIN_Y_SEPARATION 3
                     times Y_SEP_GROWTH 3
                       
   x = div (times width 2) 5  // A little to the left of centre.

   numLayers = 0

   np = len topic.parentLinks
   ngp = 0 
   nggp = 0

   if np
      numLayers = 1

      // Collect Grandparents
      grandParents = []model.Topic
      for parentLink in topic.parentLinks
         parent = parentLink.parent
         for gpLink in parent.parentLinks
            grandParents += gpLink.parent

      ngp = len grandParents

      if ngp
         numLayers = 2

         // Collect Great Grandparents
         greatGrandParents = []model.Topic
         for grandparent in grandParents
            for ggpLink in grandparent.parentLinks
               greatGrandParents += ggpLink.parent

         nggp = len greatGrandParents
         if nggp
            numLayers = 3

   nc = len topic.childLinks
   ngc = 0
   nggc = 0

   if nc
      numLayers = plus numLayers 1

      // Collect Grandchildren
      grandChildren = []model.Topic
      for childLink in topic.childLinks
         child = childLink.child
         for gpLink in child.childLinks
            grandChildren += gpLink.child

      ngc = len grandChildren

      if ngc
         numLayers = plus numLayers 1      
         
         // Collect Great Grandchildren
         greatGrandChildren = []model.Topic
         for grandchild in grandChildren
            for ggcLink in grandchild.childLinks
               greatGrandChildren += ggcLink.child

         nggc = len greatGrandChildren
         if nggc
            numLayers = plus numLayers 1

   height = plus 
               times 2 Y_MIN
               plus 
                  times MIN_Y_SEPARATION numLayers
                  times Y_SEP_GROWTH numLayers

   if np
      if ngp
         if nggp
            if nc
               if ngc
                  if nggc  // All 7 layers
                     y = div height 2  
                  else  // 6 layers - bottom 1 missing
                     y = div (times 2 height) 3
               else  // 5 layers - bottom 2 missing
                  y = div (times 4 height) 5
            else  // 4 layers - topic is bottom
               y = minus height Y_MIN
         else
            if nc
               if ngc
                  if nggc  //  6 layers
                     y = div (times 1 height) 3
                  else  // 5 layers - bottom 1 missing
                     y = div height 2  
               else  // 4 layers - bottom 2 missing
                  y = div (times 3 height) 4
            else  // 3 layers - topic is bottom
               y = minus height Y_MIN    
      else              
         if nc
            if ngc
               if nggc  //  5 layers
                  y = div (times 1 height) 5
               else  // 4 layers - bottom 1 missing
                  y = div height 4  
            else  // 3 layers - bottom 2 missing
               y = div (times 3 height) 4
         else  // 2 layers - topic is bottom
            y = minus height Y_MIN    
   else              
      if nc
         if ngc
            if nggc  //  4 layers
               y = Y_MIN
            else  // 3 layers - bottom 1 missing
               y = div height 4  
         else  // 2 layers - bottom 2 missing
            y = div height 3
      else  // 1 layers - topic is bottom
         y = div height 2            

   parents = [
                for parentLink in topic.parentLinks
                   parentLink.parent
             ]model.Topic

   children = [
                 for childLink in topic.childLinks
                    childLink.child
              ]model.Topic


   pos = position topic user
   pos.x = x
   pos.y = y

   focusPosition = pos  // Save the position of the focus topic
   focusTopicWidth = times (len topic.title) CHAR_WIDTH


   // Lay out related tos

   xMaxUsed = X_MIN  // These will define how much the focus topic has to be moved
   yMaxUsed = Y_MIN  // to make remove for related topics

   nt = len topic.toLinks
   yi = plus (times 3 CHAR_HEIGHT) (minus y MIN_Y_SEPARATION)
   yFirstRelated = yi

   if nt
      xi = X_MIN
      isLeftmost = true
      for toLink in topic.toLinks
         related = toLink.to
         pos = position related user

         offset = times
                     min (len related.title) MAX_TITLE_CHARS_DISPLAYED
                     CHAR_WIDTH

         if isLeftmost
            xi = plus xi (div offset 3)
            // print related.title xi 
            isLeftmost = false 

         pos.x = xi
         pos.y = yi         

         xMaxUsed = plus xi offset
         yMaxUsed = plus yi CHAR_HEIGHT

         xi = plus xi 50
         yi = plus yi CHAR_HEIGHT

   // Lay out related froms

   nf = len topic.fromLinks

   if nf
      xi = X_MIN
      isLeftmost = true
      for fromLink in topic.fromLinks
         related = fromLink.from
         pos = position related user      

         offset = times
                     min (len related.title) MAX_TITLE_CHARS_DISPLAYED
                     CHAR_WIDTH

         if isLeftmost
            xi = plus xi (div offset 2)
            // print related.title xi 
            isLeftmost = false 

         pos.x = xi
         pos.y = yi         

         xMaxUsed = max xMaxUsed (plus xi offset)
         yMaxUsed = plus yi CHAR_HEIGHT

         xi = plus xi 50
         yi = plus yi CHAR_HEIGHT

   xMaxUsed = plus xMaxUsed 50
   yMaxUsed = plus yMaxUsed 50

   if lt focusPosition.x xMaxUsed
      focusPosition.x = xMaxUsed
      x = xMaxUsed
      // print "oldWidth" width
      newWidth = plus xMaxUsed focusTopicWidth
      if lt width newWidth
         width = newWidth
      // print x 
      // print width
   
   yRelatedOffset = 0                  
   yChildren = plus y MIN_Y_SEPARATION
   if lt yMaxUsed (minus yChildren 20)
      yRelatedOffset = minus (minus yChildren 20) yMaxUsed

   if gt (plus yRelatedOffset yFirstRelated) y
      yRelatedOffset = minus y yFirstRelated

   if gt yRelatedOffset 0
      for toLink in topic.toLinks
         for pos in toLink.to.positions
            if eq pos.user user
               pos.y = plus pos.y yRelatedOffset
               break

      for fromLink in topic.fromLinks
         for pos in fromLink.from.positions
            if eq pos.user user
               pos.y = plus pos.y yRelatedOffset
               break


   // Lay out Parents

   yi = minus y MIN_Y_SEPARATION 
 
   // EGH not doing this any more because alternating y bumps up and down
   // yAdjust = times Y_ADJUST_INCREMENT (div np 2)
   // yi = minus yi yAdjust

   prevOffset = 0

   if np
      xi = X_MIN
      isLeftmost = true
      isOdd = true
      for parent in parents
         pos = position parent user

         offset = times
                     min (len parent.title) MAX_TITLE_CHARS_DISPLAYED
                     CHAR_WIDTH

         if isLeftmost
            xi = plus xi (div offset 2)
            // print parent.title xi 
            isLeftmost = false 
         else
            xi = plus xi 
                      div (plus offset prevOffset) 2
         prevOffset = offset


         if isOdd  // EGH new
            yi = plus yi Y_ADJUST_INCREMENT
         pos.x = xi
         pos.y = yi         
         if isOdd  // EGH new
            yi = minus yi Y_ADJUST_INCREMENT
            isOdd = false
         else
            isOdd = true   


      // Lay out Grandparents

      yi = minus yi (plus MIN_Y_SEPARATION Y_SEP_GROWTH)

      // EGH not doing this any more because alternating y bumps up and down      
      // yAdjust = times Y_ADJUST_INCREMENT (div ngp 4)
      // yi = minus yi yAdjust

      if ngp
         xi = X_MIN
         isLeftmost = true
         isOdd = true         
         for grandParent in grandParents
            pos = position grandParent user

            offset = times
                        min (len grandParent.title) MAX_TITLE_CHARS_DISPLAYED
                        minus CHAR_WIDTH GRAND_SQUEEZE

            if isLeftmost
               xi = plus xi (div offset 2)
               isLeftmost = false
            else
               xi = plus xi 
                         div (plus offset prevOffset) 2
            prevOffset = offset

            if isOdd  // EGH new
               yi = plus yi Y_ADJUST_INCREMENT

            pos.x = xi
            pos.y = yi         
            if isOdd  // EGH new
               yi = minus yi Y_ADJUST_INCREMENT
               isOdd = false
            else
               isOdd = true   


         // Lay out Great Grandparents

         yi = minus yi 
                    plus MIN_Y_SEPARATION (times 2 Y_SEP_GROWTH)
         // yAdjust = times Y_ADJUST_INCREMENT (div nggp 2)
         // yi = minus yi yAdjust

         if nggp
            xi = X_MIN
            isLeftmost = true
            isOdd = true
            for greatGrandParent in greatGrandParents
               pos = position greatGrandParent user

               offset = times
                           min (len greatGrandParent.title) MAX_TITLE_CHARS_DISPLAYED
                           minus CHAR_WIDTH GREAT_GRAND_SQUEEZE

               if isLeftmost
                  xi = plus xi (div offset 2)
                  isLeftmost = false
               else
                  xi = plus xi 
                            div (plus offset prevOffset) 2
               prevOffset = offset

               if isOdd  // EGH new
                  yi = plus yi Y_ADJUST_INCREMENT
               pos.x = xi
               pos.y = yi      
               if isOdd  // EGH new
                  yi = minus yi Y_ADJUST_INCREMENT
                  isOdd = false
               else
                  isOdd = true                      

   // Lay out Children

   yi = plus y MIN_Y_SEPARATION 

   if gt yMaxUsed yi
      yi = yMaxUsed
   
   // EGH not doing this any more because alternating y bumps up and down                  
   // yAdjust = times Y_ADJUST_INCREMENT (div nc 2)
   // yi = minus yi yAdjust

   if nc
      xi = X_MIN
      isLeftmost = true
      isOdd = true
      for child in children
         pos = position child user

         offset = times
                     min (len child.title) MAX_TITLE_CHARS_DISPLAYED
                     CHAR_WIDTH

         if isLeftmost
            xi = plus xi (div offset 2)      
            // print child.title xi       
            isLeftmost = false
         else
            xi = plus xi 
                      div (plus offset prevOffset) 2
         prevOffset = offset

         if isOdd  // EGH new
            yi = minus yi Y_ADJUST_INCREMENT
         pos.x = xi
         pos.y = yi    

         yMaxUsed = yi  

         if isOdd  // EGH new
            yi = plus yi Y_ADJUST_INCREMENT
            isOdd = false
         else
            isOdd = true   

         // print child.title "offset" offset "xi" xi


      // Lay out Grandchildren

      yi = plus yi (plus MIN_Y_SEPARATION Y_SEP_GROWTH)
      yAdjust = times Y_ADJUST_INCREMENT (div ngc 4)
      yi = plus yi yAdjust

      if ngc
         xi = X_MIN
         isLeftmost = true
         isOdd = true
         for grandChild in grandChildren
            pos = position grandChild user

            offset = times
                        min (len grandChild.title) MAX_TITLE_CHARS_DISPLAYED
                        minus CHAR_WIDTH GRAND_SQUEEZE

            if isLeftmost
               xi = plus xi (div offset 2)             
               isLeftmost = false
            else
               xi = plus xi 
                         div (plus offset prevOffset) 2
            prevOffset = offset

            if isOdd  // EGH new
               yi = minus yi Y_ADJUST_INCREMENT

            pos.x = xi
            pos.y = yi      

            yMaxUsed = yi   

            if isOdd  // EGH new
               yi = plus yi Y_ADJUST_INCREMENT
               isOdd = false
            else
               isOdd = true    


         // Lay out Great Grandchildren

         yi = plus yi 
                   plus MIN_Y_SEPARATION (times 2 Y_SEP_GROWTH)
         yAdjust = times Y_ADJUST_INCREMENT (div nggc 2)
         yi = plus yi yAdjust

         if nggc
            xi = X_MIN
            isLeftmost = true
            isOdd = true
            for greatGrandChild in greatGrandChildren
               pos = position greatGrandChild user

               offset = times
                           min (len greatGrandChild.title) MAX_TITLE_CHARS_DISPLAYED
                           minus CHAR_WIDTH GREAT_GRAND_SQUEEZE

               if isLeftmost
                  xi = plus xi (div offset 2)             
                  isLeftmost = false
               else
                  xi = plus xi 
                            div (plus offset prevOffset) 2
               prevOffset = offset

               if isOdd  // EGH new
                  yi = minus yi Y_ADJUST_INCREMENT
               
               pos.x = xi
               pos.y = yi  

               yMaxUsed = yi 

               if isOdd  // EGH new
                  yi = plus yi Y_ADJUST_INCREMENT
                  isOdd = false
               else
                  isOdd = true                       

   yMaxUsed = plus yMaxUsed 50

   if gt yMaxUsed height
      height = yMaxUsed 

   if nggp
      distribute greatGrandParents user (minus CHAR_WIDTH GREAT_GRAND_SQUEEZE) width false
      rightShift greatGrandParents user focusPosition.x      
   if ngp
      distribute grandParents user (minus CHAR_WIDTH GRAND_SQUEEZE) width (gt nggp 0)
      rightShift grandParents user focusPosition.x      
   if np
      if gt wgp wp
         distribute parents 
                    user 
                    CHAR_WIDTH 
                    minus width (times 2 X_MIN) 
                    gt ngp 0   
      else 
         distribute parents user CHAR_WIDTH width (gt ngp 0)   
      rightShift parents user focusPosition.x      
   if nggc
      distribute greatGrandChildren user (minus CHAR_WIDTH GREAT_GRAND_SQUEEZE) width false
      rightShift greatGrandChildren user focusPosition.x       
   if ngc
      distribute grandChildren user (minus CHAR_WIDTH GRAND_SQUEEZE) width (gt nggc 0)
      rightShift grandChildren user focusPosition.x       
   if nc
      if gt wgc wc
         distribute children
                    user 
                    CHAR_WIDTH 
                    minus width (times 2 X_MIN) 
                    gt ngc 0
      else
         distribute children user CHAR_WIDTH width (gt ngc 0)
      rightShift children user focusPosition.x
















max a Int b Int > Int
"""
 Returns the maximum of the two numbers
"""
   if gt b a
      => b
   => a


min a Int b Int > Int
"""
 Returns the minimum of the two numbers
"""
   if lt b a
      => b
   => a


rightShift topicRow [] model.Topic user model.User focusTopicx Int
"""
 If a row is shifted way over to the left of canvas, shift it closer to the 
 x position of the focus topic.
"""
   last = minus (len topicRow) 1
   lastTopic = topicRow[last]
   lastPos = position lastTopic user    
   if lt lastPos.x (minus focusTopicx X_MIN)
      xDelta = minus focusTopicx lastPos.x
      for topic in topicRow
         pos = position topic user      
         pos.x = plus pos.x xDelta 


MAX_DISTRIBUTION_TOTAL_WIDTH = 2000
MAX_DISTRIBUTION_WIDTH_INCREMENT = 400


distribute topicRow [] model.Topic user model.User charWidth Int canvasWidth Int hasDescendents Bool
"""
 Distribute extra horizontal space along a row of topics in the graph.
"""
   availableWidth = min MAX_DISTRIBUTION_TOTAL_WIDTH canvasWidth
   if hasDescendents 
      maxWidthIncrement = 1000
   else
      maxWidthIncrement = MAX_DISTRIBUTION_WIDTH_INCREMENT

   last = minus (len topicRow) 1
   nGaps = last   
   if not nGaps
      =>
   lastTopic = topicRow[last]
   extra = div
              times 
                 min (len lastTopic.title) MAX_TITLE_CHARS_DISPLAYED
                 charWidth
              2
   pos = position lastTopic user           
   usedWidth = plus pos.x (plus extra X_MIN)

   freeWidth = minus availableWidth usedWidth
   if gt freeWidth 0     
      totalGapFillAllowed = times maxWidthIncrement nGaps
      fillDelta = minus freeWidth totalGapFillAllowed
      if lt fillDelta 0
         leftMargin = 0
      else
         leftMargin = div fillDelta 2
 
      widthIncrement = min maxWidthIncrement (div freeWidth nGaps)

      xDelta = leftMargin
      for topic in topicRow
         pos = position topic user      
         pos.x = plus pos.x xDelta
         xDelta = plus xDelta widthIncrement         



ancestorsWidth topic model.Topic > wa Int wp Int wgp Int wggp Int
"""
 Return a width based on an estimate of the width needed to display the titles of 
 parents, grandparents, and great grandparents of the topic.
 Also returns separarate widths of the parent, grandparent, and great grandparent row.
"""
   n1 = 0
   n2 = 0
   n3 = 0
   for parentLink in topic.parentLinks
      parent = parentLink.parent
      n1 = plus 
              n1
              times 
                 min (len parent.title) MAX_TITLE_CHARS_DISPLAYED
                 CHAR_WIDTH
      for gpLink in parent.parentLinks
         grandParent = gpLink.parent
         n2 = plus 
                 n2
                 times 
                    min (len grandParent.title) MAX_TITLE_CHARS_DISPLAYED
                    minus CHAR_WIDTH GRAND_SQUEEZE

         for ggpLink in grandParent.parentLinks
            ggParent = ggpLink.parent
            n3 = plus 
                    n3
                    times 
                       min (len ggParent.title) MAX_TITLE_CHARS_DISPLAYED
                       minus CHAR_WIDTH GREAT_GRAND_SQUEEZE
   wa = max (max n3 n2) n1
   wp wgp wggp = n1 n2 n3

   

descendantsWidth 
   topic model.Topic 
   grandchildrenVertical Bool
   greatGrandchildrenVertical Bool
> 
   wd Int 
   wp Int 
   wgp Int 
   wggp Int
"""
 Return a width based on an estimate of the width needed to display the titles of 
 children, grandchildren, and great grandchildren of the topic.
"""
   n1 = 0
   n2 = 0
   n3 = 0
   for childLink in topic.childLinks
      child = childLink.child
      n1 = plus 
              n1
              times 
                 min (len child.title) MAX_TITLE_CHARS_DISPLAYED
                 CHAR_WIDTH
      if grandchildrenVertical
         n1 = plus n1 VERTICAL_LAYOUT_CHILD_HORIZONTAL_SEPARATION
      for gpLink in child.childLinks
         grandChild = gpLink.child
         if grandchildrenVertical
            n2 = plus
                    n2
                    50
         else
            n2 = plus 
                    n2
                    times 
                       min (len grandChild.title) MAX_TITLE_CHARS_DISPLAYED
                       minus CHAR_WIDTH GRAND_SQUEEZE
            if greatGrandchildrenVertical
               n2 = plus n2 VERTICAL_LAYOUT_GRANDCHILD_HORIZONTAL_SEPARATION

         for ggpLink in grandChild.childLinks
            ggChild = ggpLink.child
            if greatGrandchildrenVertical
               n3 = plus
                       n3
                       25
            else
               n3 = plus 
                       n3
                       times 
                          min (len ggChild.title) MAX_TITLE_CHARS_DISPLAYED
                          minus CHAR_WIDTH GREAT_GRAND_SQUEEZE
   if grandchildrenVertical
      n2 = plus n2 400
   if greatGrandchildrenVertical
      if not grandchildrenVertical
         n2 = plus n2 400
      n3 = plus n3 400      
   wd = max (max n3 n2) n1
   wc wgc wggc = n1 n2 n3


