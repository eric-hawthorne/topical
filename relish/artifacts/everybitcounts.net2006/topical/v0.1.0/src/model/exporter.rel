origin   everybitcounts.net2006
artifact topical
package  model

"""
 exporter.rel

 Methods to export an ontology to a flat file.
"""


import
   json
   datetime
   strings
   files


exportToJson ontology Ontology > jsonEncoded String err String
"""
 Flattens the ontology into a serialized json format.
"""
   exporter = JsonExporter ontology
   flattenOntology exporter ontology.root
   rootId = dbid ontology.root
   exporter.flatOntology = FlatOntology exporter
   jsonEncoded err = jsonMarshal exporter.flatOntology


flattenOntology 
   xp JsonExporter
   topic Topic  
"""
 Populates lists of flat (un-networked) versions topics and links.
 These can be JSON-serialized later.
 Ensures it does not loop in an object network with reference loops.
"""
   topicId = dbid topic
   if xp.dbidToTopicNum[? topicId]  // Already visited this topic
      =>

   topicNum = xp.nextTopicNum
   flatTopic = FlatTopic topic topicNum
   xp.topics += flatTopic   
   xp.dbidToTopicNum[topicId] = topicNum
   xp.nextTopicNum = plus topicNum 1

   for link in topic.childLinks
      linkId = dbid link

      if xp.dbidToLinkNum[? linkId]  // Already visited this link
         continue
      linkNum = xp.nextLinkNum
      flatLink = FlatLink link linkNum
      xp.parentChilds += flatLink
      xp.dbidToLinkNum[linkId] = linkNum
      xp.nextLinkNum = plus linkNum 1      
      flattenOntology xp link.child
      topic2Id = dbid link.child
      flatLink.topic1 = topicNum  // topic 1 is parent      
      flatLink.topic2 = xp.dbidToTopicNum[! topic2Id]  // topic2 is child 
   
   for link in topic.parentLinks
      linkId = dbid link
      if xp.dbidToLinkNum[? linkId]  // Already visited this link
         continue
      linkNum = xp.nextLinkNum         
      flatLink = FlatLink link linkNum
      xp.parentChilds += flatLink      
      xp.dbidToLinkNum[linkId] = linkNum
      xp.nextLinkNum = plus linkNum 1      
      flattenOntology xp link.parent
      topic1Id = dbid link.parent
      flatLink.topic1 = xp.dbidToTopicNum[! topic1Id]  // topic 1 is parent      
      flatLink.topic2 = topicNum  // topic2 is child  

   for link in topic.toLinks
      linkId = dbid link

      if xp.dbidToLinkNum[? linkId]  // Already visited this link
         continue
      linkNum = xp.nextLinkNum
      flatLink = FlatLink link linkNum
      xp.relateds += flatLink
      xp.dbidToLinkNum[linkId] = linkNum
      xp.nextLinkNum = plus linkNum 1      
      flattenOntology xp link.to
      topic2Id = dbid link.to
      flatLink.topic1 = topicNum  // topic 1 is from      
      flatLink.topic2 = xp.dbidToTopicNum[! topic2Id]  // topic2 is to
   
   for link in topic.fromLinks
      linkId = dbid link
      if xp.dbidToLinkNum[? linkId]  // Already visited this link
         continue
      linkNum = xp.nextLinkNum         
      flatLink = FlatLink link linkNum
      xp.relateds += flatLink
      xp.dbidToLinkNum[linkId] = linkNum
      xp.nextLinkNum = plus linkNum 1      
      flattenOntology xp link.from
      topic1Id = dbid link.from
      flatLink.topic1 = xp.dbidToTopicNum[! topic1Id]  // topic 1 is from      
      flatLink.topic2 = topicNum  // topic2 is to  





backup backupsDir String 
"""
 Create, under backupsDir, a datestamped directory which contains a subdirectory for each user,
 where the subdirectory contains an export file for each of the user's ontologies.
 e.g. /opt/backups/20150316/eric/Matter_Patterns.json

 Assumes it will be called no more than once a day, so uses a date stamp to name the backup
 rather than a timestamp.
"""
   timestamp = format (now "Local") "20060102"
   backupDir = fill "%s/%s" backupsDir timestamp
   users = []User "1 = 1"  // All users
   for user in users
      userBackupDir = cat backupDir "/" user.name
      mkdirAll userBackupDir
      for ontology in user.ontologies
         jsonEncoded err = exportToJson ontology
         if err
            print fill """
Could not backup ontology '%s' 
for user %s.
Error: %s
"""
                       ontology.name
                       user.name
                       err
         else
            ontologyFilePath = cat backupDir ontology.urlPathComponent ".json"
            // write the json to a file
            file err = files.File ontologyFilePath "w"
            if err
               print fill """
Could not backup ontology '%s' 
for user %s.
Error: %s
"""
                          ontology.name
                          user.name
                          err  

            n err = write file jsonEncoded

            if err
               print fill """
Could not backup ontology '%s' 
for user %s.
Error: %s
"""
                          ontology.name
                          user.name
                          err            
            close file



