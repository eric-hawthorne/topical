origin   everybitcounts.net2006
artifact topical
package  web

"""
 util.rel

 Utility functions
"""

import
   strings
   string_utils/hangul_romanization


errPage extendSessionHeader String message String buttonLabel String backUrl String 
> 
   String
   String 
   Map
"""
 Returns instructions for displaying an error message on an error page.
"""
   => extendSessionHeader
      "err.html"
      {
         "errorMessage"   => message
         "backButtonName" => buttonLabel      
         "backUrlPath"    => backUrl
      }String > String


errPage message String buttonLabel String backUrl String 
> 
   String 
   Map
   Any
"""
 Returns instructions for displaying an error message on an error page.
"""
   => "err.html"
      {
         "errorMessage"   => message
         "backButtonName" => buttonLabel      
         "backUrlPath"    => backUrl
      }String > String
      nil


errf preamble String name String err String > String String Any
"""
 Return an html formatted error message as the second argument, and "HTML" as the first argument.
 This variant takes 3 arguments, a message, a name of some object, and the error message that was 
 produced.
 The result of this function is suitable for being returned (in the case of error) by a web dialog
 request-handler method.
"""   
   => "HTML"
      fill """
<html>
<center>
<p style="max-width: 800px; padding: 30px">
%s %s: %s
</p>
</center>
</html>
"""
           preamble
           name
           err
      nil


errf preamble String err String > String String Any
"""
 Return an html formatted error message as the second argument, and "HTML" as the first argument.
 This variant takes 3 arguments, a message, a name of some object, and the error message that was 
 produced.
 The result of this function is suitable for being returned (in the case of error) by a web dialog
 request-handler method.
"""   
   => "HTML"
      fill """
<html>
<center>
<p style="max-width: 800px; padding: 30px">
%s: %s
</p>
</center>
</html>
"""
           preamble
           err
      nil


errf err String > String String Any
"""
 Return an html formatted error message as the second argument, and "HTML" as the first argument.
 This variant takes 3 arguments, a message, a name of some object, and the error message that was 
 produced.
 The result of this function is suitable for being returned (in the case of error) by a web dialog
 request-handler method.
"""   
   => "HTML"
      fill """
<html>
<center>
<p style="max-width: 800px; padding: 30px">
%s
</p>
</center>
</html>
"""
           err
      nil


urlSanitize s String > String
"""
 Returns a version of the string made safe to be a nice looking URL path component.
 TODO: This is currently lame.
"""
   => urlPathPartEncode romanizeIfHangul s


unsanitize s String > String
"""
 Inverse of urlSanitize.
"""
   => urlPathPartDecode s


ontologyNameFormat s String > String
"""
 Unsanitize and then capitalize the string which is assumed to be 
 the urlPathComponent of a topical ontology.
"""
   slashPos = lastIndex s "/"
   s = slice s (plus 1 slashPos)
   => title unsanitize s


noBreak s String > String
"""
 Replace spaces in s by html non-breaking-space escape sequences.
"""
   => replace s " " "&nbsp;"


length c Collection > Int
"""
 Renaming of the len function since that doesn't work in templates.
"""
   => len c


stripTags s String > String
"""
 Strips html tags.
"""
   stripped = ""

   while s
      // print cat ">" s "<"
      startPos = index s "<"
      if gte startPos 0 
         s1 = slice s 0 startPos
         stripped = cat stripped s1
         s = slice s startPos
         endPos = index s ">"
         if gte endPos 0
            s = slice s (plus endPos 1)
         else
            break
      else
         break

   => stripped
      

stripTagsAndTitle s String topicTitle String > String
"""
 Strips html tags and the title of the topic from topic content.
"""
   s = stripTags s
   if eq 0 (index s topicTitle)
      => slice s (len topicTitle)
   => s


stripNbsps s String > String
"""
 Replace &nbsp; by space, but not if the &nbsp; is already followed by a space.
"""
   s = replace s "&nbsp; " "&nbsp ;"
   s = replace s "&nbsp;" " "
   s = replace s "&nbsp ;" "&nbsp; "
   => s


reEncodeTopicPath topic String > String
"""
 Takes a topic url path that has been url-decoded by the underlying framework.
 Splits it into username, ontologyname, and topicTitle parts,
 urlPathPartEncodes the ontology name and topic title parts, and rejoins into a single string.
 Note this will not work if a / was included in the ontology name. So don't do that.

 NOT CURRENTLY IN USE - MAYBE DELETE THIS METHOD
"""
   topic = slice topic 1  // remove initial "/"
   slashPos = index topic "/"
   userName = slice topic 0 slashPos
   rightPart = slice topic (plus 1 slashPos)
   slashPos = index rightPart "/"
   ontologyName = slice rightPart 0 slashPos
   topicTitle = slice rightPart (plus 1 slashPos)

   => cat "/" userName "/" (urlPathPartEncode ontologyName false) "/" (urlPathPartEncode topicTitle false)
